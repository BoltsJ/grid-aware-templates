name: Release Creation

on: 
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    # Run the compilation step
    - run: npm clean-install
    - run: npm run build

    # Remove the 'v' from the tag for versioning
    - id: get_version
      run: |
        echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
        echo "FOUNDRY_MANIFEST=https://github.com/${{github.repository}}/releases/latest/download/module.json" >> $GITHUB_ENV
        echo "FOUNDRY_DOWNLOAD=https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.zip" >> $GITHUB_ENV

    # Substitute the Manifest and Download URLs in the module.json
    - name: Substitute Manifest and Download Links For Versioned Ones
      id: sub_manifest_link_version
      uses: restackio/update-json-file-action@2.1
      with:
        file: './dist/module.json'
        fields: "{\"version\": \"${{env.VERSION}}\", \"manifest\": \"${{env.FOUNDRY_MANIFEST}}\", \"download\": \"${{env.FOUNDRY_DOWNLOAD}}\"}"

    # Create a zip file with all files required by the module to add to the release
    - name: Zip Files
      working-directory: ./dist/
      run: zip -r ./module.zip *

    # Create a release for this specific version
    - name: Update Release with Files
      id: create_version_release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true # Set this to false if you want to prevent updating existing releases
        name: ${{ github.event.release.name }}
        draft: false
        prerelease: true
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: './dist/module.json, ./dist/module.zip'
        tag: ${{ github.event.release.tag_name }}
        body: ${{ github.event.release.body }}
